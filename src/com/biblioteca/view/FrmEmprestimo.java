package com.biblioteca.view;

import com.biblioteca.model.EmprestimoLivroModel;
import com.biblioteca.model.EmprestimoLocatarioModel;
import com.biblioteca.model.EmprestimoModel;
import com.biblioteca.model.LivroModel;
import com.biblioteca.model.LivrosEmprestimosLivrosModel;
import com.biblioteca.model.LocadorModel;
import com.biblioteca.model.LocatarioModel;
import com.biblioteca.service.EmprestimoLivroService;
import com.biblioteca.service.EmprestimoLocatarioService;
import com.biblioteca.service.EmprestimoService;
import com.biblioteca.service.LivroService;
import com.biblioteca.service.LivrosEmprestimosLivrosService;
import com.biblioteca.service.LocadorService;
import com.biblioteca.service.LocatarioService;
import com.biblioteca.util.ColorirLinhaEmprestimo;
import com.biblioteca.util.GetDateUtil;
import java.awt.Color;
import java.awt.HeadlessException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author José Luiz
 */
public class FrmEmprestimo extends javax.swing.JInternalFrame {

    LocatarioModel locatarioModel = new LocatarioModel();
    LocatarioService locatarioService = new LocatarioService();
    ArrayList<LocatarioModel> listaLocatarioModel = new ArrayList<>();

    LocadorModel locadorModel = new LocadorModel();
    LocadorService locadorService = new LocadorService();
    ArrayList<LocadorModel> listaLocadorModel = new ArrayList<>();

    LivroModel livroModel = new LivroModel();
    LivroService livroService = new LivroService();
    ArrayList<LivroModel> listaLivroModel = new ArrayList<>();

    EmprestimoModel emprestimoModel = new EmprestimoModel();
    EmprestimoService emprestimoService = new EmprestimoService();

    EmprestimoLocatarioService emprestimoLocatarioService = new EmprestimoLocatarioService();
    ArrayList<EmprestimoLocatarioModel> listaEmprestimoLocatarioModel = new ArrayList<>();

    EmprestimoLivroModel emprestimoLivroModel = new EmprestimoLivroModel();
    EmprestimoLivroService emprestimoLivroService = new EmprestimoLivroService();
    ArrayList<EmprestimoLivroModel> listaEmprestimoLivroModel = new ArrayList<>();

    LivrosEmprestimosLivrosService livrosEmprestimosLivrosService = new LivrosEmprestimosLivrosService();
    ArrayList<LivrosEmprestimosLivrosModel> listaLivrosEmprestimosLivrosModel = new ArrayList<>();

    GetDateUtil getDateUtil = new GetDateUtil();

    /**
     * Creates new form FrmEmprestimo
     */
    public FrmEmprestimo() {
        initComponents();
        setarData();
        corLinhaTabela();
        listarLocatarios();
        listarLocadores();
        limparCampos();
        carregarEmprestimo();
        carregarLivroDevolucao();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtfAutor1 = new javax.swing.JTextField();
        jtfAutor2 = new javax.swing.JTextField();
        jcbTitulo = new javax.swing.JComboBox<>();
        jlQuantidade = new javax.swing.JLabel();
        jlCategoria = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jcbLocador = new javax.swing.JComboBox<>();
        jcbLocatario = new javax.swing.JComboBox<>();
        jtfDataEmprestimo = new javax.swing.JFormattedTextField();
        jtfDataDevolucao = new javax.swing.JFormattedTextField();
        jlAdicionar = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtAdicionarEmprestimo = new javax.swing.JTable();
        jbCancelar = new javax.swing.JButton();
        jbRemoverItens = new javax.swing.JButton();
        jbEmprestar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtListarEmprestimo = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtDevolucaoLivro = new javax.swing.JTable();
        jbDevolver = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("EMPRÉSTIMOS E DEVOLUÇÕES");

        jPanel1.setBackground(new java.awt.Color(28, 89, 124));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("TÍTULO");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("1° AUTOR");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("QUANTIDADE DISPONÍVEL");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("GÊNERO (CATEGORIA)");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("2° AUTOR");

        jtfAutor1.setEditable(false);
        jtfAutor1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jtfAutor2.setEditable(false);
        jtfAutor2.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jcbTitulo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jcbTitulo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE UM LIVRO" }));
        jcbTitulo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jcbTituloPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jcbTituloPopupMenuWillBecomeVisible(evt);
            }
        });

        jlQuantidade.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jlQuantidade.setForeground(new java.awt.Color(255, 255, 255));
        jlQuantidade.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlQuantidade.setText("$0");

        jlCategoria.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jlCategoria.setForeground(new java.awt.Color(255, 255, 255));
        jlCategoria.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlCategoria.setText("$CATEGORIA");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("LOCADOR");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("LOCATÁRIO");
        jLabel9.setAutoscrolls(true);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("DATA EMPRÉSTIMO");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("DEVOLUÇÃO");

        jcbLocador.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jcbLocador.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE UM LOCADOR" }));

        jcbLocatario.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jcbLocatario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE UM LOCATÁRIO" }));

        try {
            jtfDataEmprestimo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfDataEmprestimo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfDataEmprestimo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        try {
            jtfDataDevolucao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfDataDevolucao.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfDataDevolucao.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jlAdicionar.setDisplayedMnemonic('4');
        jlAdicionar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jlAdicionar.setForeground(new java.awt.Color(255, 255, 255));
        jlAdicionar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlAdicionar.setText("ADICIONAR");
        jlAdicionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlAdicionarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jlAdicionarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jlAdicionarMouseExited(evt);
            }
        });

        jtAdicionarEmprestimo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Livro", "Título", "Data Empréstimo", "Data Devolução", "Quantidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtAdicionarEmprestimo);
        if (jtAdicionarEmprestimo.getColumnModel().getColumnCount() > 0) {
            jtAdicionarEmprestimo.getColumnModel().getColumn(0).setResizable(false);
            jtAdicionarEmprestimo.getColumnModel().getColumn(1).setResizable(false);
            jtAdicionarEmprestimo.getColumnModel().getColumn(2).setResizable(false);
            jtAdicionarEmprestimo.getColumnModel().getColumn(3).setResizable(false);
            jtAdicionarEmprestimo.getColumnModel().getColumn(4).setResizable(false);
        }

        jbCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/biblioteca/images/actions/cancelar.png"))); // NOI18N
        jbCancelar.setText("CANCELAR");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jbRemoverItens.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/biblioteca/images/actions/lixeira.png"))); // NOI18N
        jbRemoverItens.setText("REMOVER ITENS");
        jbRemoverItens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverItensActionPerformed(evt);
            }
        });

        jbEmprestar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/biblioteca/images/actions/emprestar.png"))); // NOI18N
        jbEmprestar.setText("EMRESTAR");
        jbEmprestar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEmprestarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtfAutor1)
                                    .addComponent(jcbTitulo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfAutor2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jlQuantidade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jlCategoria, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(56, 56, 56)
                                .addComponent(jcbLocatario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtfDataEmprestimo, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                                    .addComponent(jtfDataDevolucao))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jlAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(66, 66, 66)
                                .addComponent(jcbLocador, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbRemoverItens)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbEmprestar)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jcbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jtfAutor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jtfAutor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jlQuantidade))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(jlCategoria))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jcbLocador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jcbLocatario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(jtfDataEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jtfDataDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11)))
                            .addComponent(jlAdicionar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCancelar)
                    .addComponent(jbRemoverItens)
                    .addComponent(jbEmprestar))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Empréstimo", jPanel1);

        jPanel2.setBackground(new java.awt.Color(28, 89, 124));

        jtListarEmprestimo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Livro", "Locador", "Locatário", "Empréstimo", "Devolução", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtListarEmprestimo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtListarEmprestimoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtListarEmprestimo);
        if (jtListarEmprestimo.getColumnModel().getColumnCount() > 0) {
            jtListarEmprestimo.getColumnModel().getColumn(0).setResizable(false);
            jtListarEmprestimo.getColumnModel().getColumn(1).setResizable(false);
            jtListarEmprestimo.getColumnModel().getColumn(2).setResizable(false);
            jtListarEmprestimo.getColumnModel().getColumn(3).setResizable(false);
            jtListarEmprestimo.getColumnModel().getColumn(4).setResizable(false);
            jtListarEmprestimo.getColumnModel().getColumn(5).setResizable(false);
            jtListarEmprestimo.getColumnModel().getColumn(6).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 876, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Listar Empréstimos", jPanel2);

        jPanel3.setBackground(new java.awt.Color(28, 89, 124));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("SELECIONE O EMPRÉSTIMO NA TABELA E CLIQUE EM FAZER DEVOLUÇÃO");

        jtDevolucaoLivro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Título", "Locatário", "Empréstimo", "Devolução", "Qtde"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jtDevolucaoLivro);
        if (jtDevolucaoLivro.getColumnModel().getColumnCount() > 0) {
            jtDevolucaoLivro.getColumnModel().getColumn(0).setResizable(false);
            jtDevolucaoLivro.getColumnModel().getColumn(0).setPreferredWidth(5);
            jtDevolucaoLivro.getColumnModel().getColumn(1).setResizable(false);
            jtDevolucaoLivro.getColumnModel().getColumn(2).setResizable(false);
            jtDevolucaoLivro.getColumnModel().getColumn(3).setResizable(false);
            jtDevolucaoLivro.getColumnModel().getColumn(3).setPreferredWidth(30);
            jtDevolucaoLivro.getColumnModel().getColumn(4).setResizable(false);
            jtDevolucaoLivro.getColumnModel().getColumn(4).setPreferredWidth(30);
            jtDevolucaoLivro.getColumnModel().getColumn(5).setResizable(false);
        }

        jbDevolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/biblioteca/images/actions/devolver.png"))); // NOI18N
        jbDevolver.setText("FAZER DEVOLUÇÃO");
        jbDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDevolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 207, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(188, 188, 188))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jbDevolver)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbDevolver)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Devolver Livro", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 881, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        listarLocatarios();
        listarLocadores();
        listarLivros();
        carregarEmprestimo();
        carregarLivroDevolucao();
        limparCampos();
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbRemoverItensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverItensActionPerformed
        int linha = jtAdicionarEmprestimo.getSelectedRow();
        if (linha < 0) {
            JOptionPane.showMessageDialog(this, "Selecione um livro!", "Atenção!",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel modelo = (DefaultTableModel) jtAdicionarEmprestimo.getModel();
            modelo.removeRow(linha);
        }
    }//GEN-LAST:event_jbRemoverItensActionPerformed

    private void jbEmprestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEmprestarActionPerformed
        Object[] options = {"Sim", "Não"};
        int n = JOptionPane.showOptionDialog(null,
                "Deseja realizar o empréstimo?", "Atenção", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (n == 0) {
            liberarEmprestimo();
            limparCampos();
            listarLocatarios();
            listarLocadores();
            listarLivros();
            carregarEmprestimo();
            carregarLivroDevolucao();
        } else {
            JOptionPane.showMessageDialog(this, "Empréstimo cancelado pelo locador!",
                    "Atenção", JOptionPane.ERROR_MESSAGE);
            limparCampos();
            listarLocatarios();
            listarLocadores();
            listarLivros();
            carregarEmprestimo();
            carregarLivroDevolucao();
        }
    }//GEN-LAST:event_jbEmprestarActionPerformed

    private void jlAdicionarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlAdicionarMouseClicked
        adicionarLivroTabela();
    }//GEN-LAST:event_jlAdicionarMouseClicked

    private void jbDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDevolverActionPerformed
        devolverLivro();
    }//GEN-LAST:event_jbDevolverActionPerformed

    private void jtListarEmprestimoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtListarEmprestimoMouseClicked
        // TODO add your handling code here: excluir
    }//GEN-LAST:event_jtListarEmprestimoMouseClicked

    private void jcbTituloPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jcbTituloPopupMenuWillBecomeInvisible
        preencherCampos();
    }//GEN-LAST:event_jcbTituloPopupMenuWillBecomeInvisible

    private void jcbTituloPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jcbTituloPopupMenuWillBecomeVisible
        listarLivros();
    }//GEN-LAST:event_jcbTituloPopupMenuWillBecomeVisible

    private void jlAdicionarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlAdicionarMouseEntered
        jlAdicionar.setForeground(Color.yellow);
    }//GEN-LAST:event_jlAdicionarMouseEntered

    private void jlAdicionarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlAdicionarMouseExited
        jlAdicionar.setForeground(Color.WHITE);
    }//GEN-LAST:event_jlAdicionarMouseExited

    private void setarData() {
        jtfDataEmprestimo.setText(getDateUtil.setarData());
        jtfDataDevolucao.setText(getDateUtil.setarDataFutura());
    }

    private void limparCampos() {
        jtfAutor1.setText("SELECIONE UM LIVRO");
        jtfAutor2.setText("SELECIONE UM LIVRO");
        jlCategoria.setText("SELECIONE UM LIVRO");
        jlQuantidade.setText("SELECIONE UM LIVRO");
        jcbTitulo.setSelectedItem("SELECIONE UM LIVRO");
        jcbLocador.setSelectedItem("SELECIONE UM LOCADOR");
        jcbLocatario.setSelectedItem("SELECIONE UM LOCATÁRIO");
        setarData();
        DefaultTableModel modelo = (DefaultTableModel) jtAdicionarEmprestimo.getModel();
        modelo.setNumRows(0);
    }

    private void listarLocatarios() {
        try {
            listaLocatarioModel = locatarioService.getListaLocatarioDAO();
            jcbLocatario.removeAllItems();
            int cont = listaLocatarioModel.size();
            for (int i = 0; i < cont; i++) {
                jcbLocatario.addItem(listaLocatarioModel.get(i).getNomeLocatario());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao listar os locatários",
                    "Erro", JOptionPane.ERROR);
        }
    }

    private void listarLocadores() {
        try {
            listaLocadorModel = locadorService.getListaLocadorDAO();
            jcbLocador.removeAllItems();
            int cont = listaLocadorModel.size();
            for (int i = 0; i < cont; i++) {
                jcbLocador.addItem(listaLocadorModel.get(i).getNomeLocador());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao listar os locadores",
                    "Erro", JOptionPane.ERROR);
        }
    }

    private void listarLivros() {
        try {
            listaLivroModel = livroService.getListaLivroDAO();
            jcbTitulo.removeAllItems();
            int cont = listaLivroModel.size();
            for (int i = 0; i < cont; i++) {
                if (listaLivroModel.get(i).getQtdeLivro() > 0) {
                    jcbTitulo.addItem(listaLivroModel.get(i).getTituloLivro());
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao listar os livros",
                    "Erro", JOptionPane.ERROR);
        }
    }

    private void preencherCampos() {
        livroModel = livroService.getLivroDAO(jcbTitulo.getSelectedItem().toString());
        jlQuantidade.setText(String.valueOf(livroModel.getQtdeLivro()));
        jtfAutor1.setText(String.valueOf(livroModel.getAutor1Livro()));
        jtfAutor2.setText(String.valueOf(livroModel.getAutor2Livro()));
        jlCategoria.setText(String.valueOf(livroModel.getGeneroLivro()));
    }

    private void carregarEmprestimo() {
        DefaultTableModel modelo = (DefaultTableModel) jtListarEmprestimo.getModel();
        listaEmprestimoLocatarioModel = emprestimoLocatarioService.getListaEmprestimosLocatarioDAO();
        modelo.setNumRows(0);

        try {
            int cont = listaEmprestimoLocatarioModel.size();
            for (int i = 0; i < cont; i++) {
                modelo.addRow(
                        new Object[]{
                            listaEmprestimoLocatarioModel.get(i).getEmprestimoModel().getIdEmprestimo(),
                            listaEmprestimoLocatarioModel.get(i).getLivroModel().getTituloLivro(),
                            listaEmprestimoLocatarioModel.get(i).getLocadorModel().getNomeLocador(),
                            listaEmprestimoLocatarioModel.get(i).getLocatarioModel().getNomeLocatario(),
                            listaEmprestimoLocatarioModel.get(i).getEmprestimoModel().getDataEmprestimo(),
                            listaEmprestimoLocatarioModel.get(i).getEmprestimoModel().getDataDevolucao(),
                            listaEmprestimoLocatarioModel.get(i).getEmprestimoModel().getStatusEmprestimo()});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar livros para preencher a tabela\n" + e.toString());
        }
    }

    private void carregarLivroDevolucao() {
        DefaultTableModel modelo = (DefaultTableModel) jtDevolucaoLivro.getModel();
        // Setando a quantidade de linhas que a tabela para não haver duplicação de
        // dados
        modelo.setNumRows(0);
        try {
            // insere os produtos na tabela
            int cont = listaEmprestimoLocatarioModel.size();
            for (int i = 0; i < cont; i++) {
                if (listaEmprestimoLocatarioModel.get(i).getEmprestimoModel().getStatusEmprestimo().equals("ATIVO")) {
                    modelo.addRow(
                            new Object[]{
                                listaEmprestimoLocatarioModel.get(i).getEmprestimoModel().getIdEmprestimo(),
                                listaEmprestimoLocatarioModel.get(i).getLivroModel().getTituloLivro(),
                                listaEmprestimoLocatarioModel.get(i).getLocatarioModel().getNomeLocatario(),
                                listaEmprestimoLocatarioModel.get(i).getEmprestimoModel().getDataEmprestimo(),
                                listaEmprestimoLocatarioModel.get(i).getEmprestimoModel().getDataDevolucao(),
                                listaEmprestimoLocatarioModel.get(i).getEmprestimoLivroModel().getQuantidadeEmprestimo()
                            });
                }
            }

        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar livros para preencher a tabela\n" + e.toString());
        }
    }

    private void adicionarLivroTabela() {
        int codigoLivro, codigoLocador, codigoLocatario, quantidade;

        String livro = jcbTitulo.getSelectedItem().toString();

        // pegar o id do locador
        locadorModel = locadorService.getLocadorDAO(jcbLocador.getSelectedItem().toString());
        codigoLocador = locadorModel.getIdLocador();

        // pegar o id do locatario
        locatarioModel = locatarioService.getLocatarioDAO(jcbLocatario.getSelectedItem().toString());
        codigoLocatario = locatarioModel.getIdLocatario();

        // pegar o id do livro
        livroModel = livroService.getLivroDAO(jcbTitulo.getSelectedItem().toString());
        codigoLivro = livroModel.getIdLivro();

        if (jlQuantidade.getText().equals("") || jlQuantidade.getText().equals("SELECIONE UM LIVRO")) {
            JOptionPane.showMessageDialog(this, "Você deve inserir a quantidade de livros!", "Atenção",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            livroModel = livroService.getLivroDAO(codigoLivro);
            locadorModel = locadorService.getLocadorDAO(codigoLocador);
            locatarioModel = locatarioService.getLocatarioDAO(codigoLocatario);

            String dataDevolucao = jtfDataDevolucao.getText();
            String dataEmprestimo = jtfDataEmprestimo.getText();

            quantidade = livroModel.getQtdeLivro();
            if (quantidade > 1) {
                quantidade = Integer.parseInt((JOptionPane.showInputDialog(this,
                        "Quantas unidades emprestar deste livro?\n"
                        + livro, "Atenção", JOptionPane.QUESTION_MESSAGE)));
            } else {
                quantidade = Integer.parseInt(jlQuantidade.getText());
            }

            // adiciona uma linha na tabela
            DefaultTableModel modelo = (DefaultTableModel) jtAdicionarEmprestimo.getModel();
            int cont = 0;
            for (int i = 0; i < cont; i++) {
                modelo.setNumRows(0);
            }
            modelo.addRow(new Object[]{
                livroModel.getIdLivro(),
                livroModel.getTituloLivro(),
                dataEmprestimo,
                dataDevolucao,
                quantidade
            });
        }
    }

    /**
     * verifica o status do locatário antes de liberar o emprestimo
     */
    public void liberarEmprestimo() {
        String statusLocatario = "";
        locatarioModel = locatarioService.getLocatarioDAO(jcbLocatario.getSelectedItem().toString());
        statusLocatario = locatarioModel.getStatusLocatario();
        if (statusLocatario.equals("SUSPENSO") || statusLocatario.equals("BLOQUEADO")) {
            JOptionPane.showMessageDialog(this,
                    "O locatário está com o cadastro " + statusLocatario + ".\n"
                    + "Procure o responsável pela livraria para mais informações.\n"
                    + "O empréstimo não foi realizado.",
                    "Atenção locatário " + statusLocatario + "!", JOptionPane.WARNING_MESSAGE);
        } else {
            realizarEmprestimo();
        }
    }

  public void realizarEmprestimo() {
        int codigoLivro = 0;
        int codigoLocador, codigoLocatario = 0;
        int codigoProduto = 0;
        int codigoEmprestimo = 0;
        // int quantidade = 0;
        String status = "ATIVO";
        listaEmprestimoLivroModel = new ArrayList<>();

        // pegar o id do locador
        locadorModel = locadorService.getLocadorDAO(jcbLocador.getSelectedItem().toString());
        codigoLocador = locadorModel.getIdLocador();

        // pegar o id do locatario
        locatarioModel = locatarioService.getLocatarioDAO(jcbLocatario.getSelectedItem().toString());
        codigoLocatario = locatarioModel.getIdLocatario();

        // pegar o id do livro
        livroModel = livroService.getLivroDAO(jcbTitulo.getSelectedItem().toString());
        codigoLivro = livroModel.getIdLivro();

        int cont = jtAdicionarEmprestimo.getRowCount();
        for (int i = 0; i < cont; i++) {
            livroModel = new LivroModel();
            emprestimoModel = new EmprestimoModel();

            livroModel = livroService.getLivroDAO(codigoProduto);
            emprestimoLivroModel = new EmprestimoLivroModel();
            codigoProduto = (int) jtAdicionarEmprestimo.getValueAt(i, 0);

            // emprestimo
            emprestimoModel.setIdLocador(codigoLocador);
            emprestimoModel.setIdLocatario(codigoLocatario);
            emprestimoModel.setIdEmprestimo(codigoProduto);
            emprestimoModel.setIdLivro(codigoProduto);
            emprestimoModel.setQuantidadeEmprestimo(Integer.parseInt(jtAdicionarEmprestimo.getValueAt(i, 4).toString()));
            emprestimoModel.setStatusEmprestimo(status);
            emprestimoModel.setDataDevolucao(jtAdicionarEmprestimo.getValueAt(i, 3).toString());
            emprestimoModel.setDataEmprestimo(jtAdicionarEmprestimo.getValueAt(i, 2).toString());

            codigoEmprestimo = emprestimoService.salvarEmprestimoDAO(emprestimoModel);
            if (codigoEmprestimo > 0) {
                JOptionPane.showMessageDialog(this,
                        "Empréstimo registrado com sucesso:\n" + "Locador: " + locadorModel.getNomeLocador() + "\n"
                        + "Locatário: " + locatarioModel.getNomeLocatario() + "\n" + "Data de Devolução: "
                        + emprestimoModel.getDataDevolucao() + "\n",
                        "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao registrar o empréstimo!", "Erro",
                        JOptionPane.ERROR_MESSAGE);
            }

            // emprestimo livro
            emprestimoLivroModel.setIdEmprestimoLivro(emprestimoModel.getIdEmprestimo());
            emprestimoLivroModel.setIdLivro(codigoProduto);
            emprestimoLivroModel.setQuantidadeEmprestimo(emprestimoModel.getQuantidadeEmprestimo());
            emprestimoLivroModel.setIdEmprestimo(emprestimoModel.getIdEmprestimo());

            // livro
            livroModel.setIdLivro(codigoProduto);
            livroModel.setQtdeLivro(livroService.getLivroDAO(codigoProduto).getQtdeLivro()
                    - Integer.parseInt(jtAdicionarEmprestimo.getValueAt(i, 4).toString()));
            livroModel.setTituloLivro(livroService.getLivroDAO(codigoProduto).getTituloLivro());
            listaEmprestimoLivroModel.add(emprestimoLivroModel);
            listaLivroModel.add(livroModel);
        }

        // salvar os livros do empréstimo
        if (emprestimoLivroService.salvarEmprestimosLivrosDAO(listaEmprestimoLivroModel)) {
            // alterar estoque de livros
            livroService.alterarEstoqueLivrosDAO(listaLivroModel);
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao salvar os livros do empréstimo!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void devolverLivro() {
        Object[] opcoes = {"Sim", "Não"};
        Object resposta;
        resposta = JOptionPane.showInputDialog(null, "Registrar devolução do(s) livro(s)", "Registrar?",
                JOptionPane.OK_CANCEL_OPTION, null, opcoes, "Sim");
        if (resposta.equals("Sim")) {
            int linha = jtDevolucaoLivro.getSelectedRow();
            int codigoEmprestimo = (int) jtDevolucaoLivro.getValueAt(linha, 0);

            listaLivrosEmprestimosLivrosModel = livrosEmprestimosLivrosService
                    .getListaLivrosEmprestimosLivrosDAO(codigoEmprestimo);

            emprestimoModel = emprestimoService.getEmprestimoDAO(codigoEmprestimo);
            for (int i = 0; i < listaLivrosEmprestimosLivrosModel.size(); i++) {

                livroModel = new LivroModel();
                emprestimoLivroModel = new EmprestimoLivroModel();

                livroModel.setIdLivro(listaLivrosEmprestimosLivrosModel.get(i).getLivroModel().getIdLivro());
                livroModel.setQtdeLivro(
                        (listaLivrosEmprestimosLivrosModel.get(i).getLivroModel().getQtdeLivro()
                        + listaLivrosEmprestimosLivrosModel.get(i).getEmprestimoLivroModel()
                                .getQuantidadeEmprestimo()));

                emprestimoModel.setStatusEmprestimo("INATIVO");
                emprestimoModel.setIdEmprestimo(codigoEmprestimo);
                emprestimoModel.setIdLivro(listaLivrosEmprestimosLivrosModel.get(i).getLivroModel().getIdLivro());
                emprestimoModel.setDataDevolucao(String.valueOf(jtDevolucaoLivro.getValueAt(linha, 4)));
                emprestimoModel.setDataEmprestimo(String.valueOf(jtDevolucaoLivro.getValueAt(linha, 3)));
                listaLivroModel.add(livroModel);
            }

            try {
                livroService.alterarEstoqueLivrosDAO(listaLivroModel);
                emprestimoService.atualizarEmprestimoDAO(emprestimoModel);
                JOptionPane.showMessageDialog(this, "Livro devolvido com sucesso!", "Atenção",
                        JOptionPane.WARNING_MESSAGE);

            } catch (HeadlessException e) {
                JOptionPane.showMessageDialog(this, "Erro ao registrar a devolução", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
        carregarEmprestimo();
        carregarLivroDevolucao();
        listarLivros();
        limparCampos();
    }

    private void corLinhaTabela() {
        ColorirLinhaEmprestimo colorirLinhas = new ColorirLinhaEmprestimo(6);
        jtListarEmprestimo.getColumnModel().getColumn(6).setCellRenderer(colorirLinhas);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbDevolver;
    private javax.swing.JButton jbEmprestar;
    private javax.swing.JButton jbRemoverItens;
    private javax.swing.JComboBox<String> jcbLocador;
    private javax.swing.JComboBox<String> jcbLocatario;
    private javax.swing.JComboBox<String> jcbTitulo;
    private javax.swing.JLabel jlAdicionar;
    private javax.swing.JLabel jlCategoria;
    private javax.swing.JLabel jlQuantidade;
    private javax.swing.JTable jtAdicionarEmprestimo;
    private javax.swing.JTable jtDevolucaoLivro;
    private javax.swing.JTable jtListarEmprestimo;
    private javax.swing.JTextField jtfAutor1;
    private javax.swing.JTextField jtfAutor2;
    private javax.swing.JFormattedTextField jtfDataDevolucao;
    private javax.swing.JFormattedTextField jtfDataEmprestimo;
    // End of variables declaration//GEN-END:variables
}
